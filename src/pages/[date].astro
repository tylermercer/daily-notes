---
import UnsplashBackground from "@components/UnsplashBackground.astro";
import Layout from "@layouts/Base.astro";
import filterOutFutureNotesIfProduction from "@utils/filterOutFutureNotesIfProduction";
import getNoteDate from "@utils/getNoteDate";
import sortByDate from "@utils/sortByDate";
import type { WithNextAndPrev } from "@utils/toWithNextAndPrev";
import toWithNextAndPrev from "@utils/toWithNextAndPrev";
import unsplash from "@utils/unsplash";
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
    const notes = await getCollection("notes");

    const sortedNotes = toWithNextAndPrev(
        filterOutFutureNotesIfProduction(sortByDate(notes)),
        true,
    );

    const oldest = sortedNotes.at(-1)!.item;

    return sortedNotes.map(
        (
            noteWithNextAndPrev: WithNextAndPrev<CollectionEntry<"notes">>,
            i,
        ) => ({
            params: { date: noteWithNextAndPrev.item.id },
            props: {
                isLatest: i === 0,
                noteWithNextAndPrev,
                date: noteWithNextAndPrev.item.id,
                oldest:
                    oldest.id !== noteWithNextAndPrev.item.id
                        ? oldest
                        : undefined,
            },
        }),
    );
}

export type Props = {
    date: string;
    noteWithNextAndPrev: WithNextAndPrev<CollectionEntry<"notes">>;
    oldest?: CollectionEntry<"notes">;
    isLatest: boolean;
};

const { noteWithNextAndPrev, oldest, isLatest } = Astro.props;
const { item: note, next, prev } = noteWithNextAndPrev;

const date = getNoteDate(note);

const { Content } = await render(note);

const photo = await unsplash.photos
    .get({ photoId: note.data.unsplashId })
    .then((result) => {
        if (result.errors) {
            throw new Error(result.errors.join(", "));
        } else {
            return result.response;
        }
    });

const unsplashUrl = photo.urls.regular;
const unsplashColor = photo.color ?? "#000000";

const getPathFromOptionalNote = (note: CollectionEntry<"notes"> | undefined) => note && `/${note.id}`;
---

<Layout>
    <UnsplashBackground unsplashUrl={unsplashUrl} unsplashColor={unsplashColor}>
        <main class="u-guttered">
            <h1>{date.toLocaleDateString()}</h1>
            <Content />
            <nav aria-label="Next and previous notes">
                <ul>
                    <li>
                        <a href={isLatest ? undefined : "/"}>Latest</a>
                    </li>
                    <li>
                        <a href={getPathFromOptionalNote(next)}>Next</a>
                    </li>
                    <li>
                        <a href={getPathFromOptionalNote(prev)}>Previous</a>
                    </li>
                    <li>
                        <a href={getPathFromOptionalNote(oldest)}>Oldest</a>
                    </li>
                </ul>
            </nav>
        </main>
    </UnsplashBackground>
</Layout>
