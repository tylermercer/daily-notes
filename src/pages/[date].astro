---
import UnsplashBackground from "@components/UnsplashBackground.astro";
import Layout from "@layouts/Base.astro";
import filterOutFutureNotesIfProduction from "@utils/filterOutFutureNotesIfProduction";
import getNoteDate from "@utils/getNoteDate";
import sortByDate from "@utils/sortByDate";
import type { WithNextAndPrev } from "@utils/toWithNextAndPrev";
import toWithNextAndPrev from "@utils/toWithNextAndPrev";
import unsplash from "@utils/unsplash";
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
    const notes = await getCollection("notes");

    const sortedNotes = toWithNextAndPrev(
        filterOutFutureNotesIfProduction(sortByDate(notes)),
        true,
    );

    const oldest = sortedNotes.at(-1)!.item;
    const latest = sortedNotes.at(0)!.item;

    return sortedNotes.map(
        (
            noteWithNextAndPrev: WithNextAndPrev<CollectionEntry<"notes">>,
            i,
        ) => ({
            params: { date: noteWithNextAndPrev.item.id },
            props: {
                noteWithNextAndPrev,
                date: noteWithNextAndPrev.item.id,
                oldest:
                    oldest.id !== noteWithNextAndPrev.item.id
                        ? oldest
                        : undefined,
                latest:
                    latest.id !== noteWithNextAndPrev.item.id
                        ? latest
                        : undefined,
            },
        }),
    );
}

export type Props = {
    date: string;
    noteWithNextAndPrev: WithNextAndPrev<CollectionEntry<"notes">>;
    oldest?: CollectionEntry<"notes">;
    latest?: CollectionEntry<"notes">;
};

const { noteWithNextAndPrev, oldest, latest } = Astro.props;
const { item: note, next, prev } = noteWithNextAndPrev;

const date = getNoteDate(note);

const { Content } = await render(note);

const photo = await unsplash.photos
    .get({ photoId: note.data.unsplashId })
    .then((result) => {
        if (result.errors) {
            throw new Error(result.errors.join(", "));
        } else {
            return result.response;
        }
    });

const unsplashUrl = photo.urls.regular;
const unsplashColor = photo.color ?? "#000000";

const getPathFromOptionalNote = (note: CollectionEntry<"notes"> | undefined) =>
    note && `/${note.id}`;

const unsplashAttribution = {
    name: `${photo.user.first_name} ${photo.user.last_name}`,
    url: photo.user.links.html,
};
---

<Layout unsplashColor={unsplashColor}>
    <UnsplashBackground unsplashUrl={unsplashUrl} unsplashColor={unsplashColor}>
        <main class="u-guttered">
            <h1>{date.toLocaleDateString()}</h1>
            <Content />
            <div class="attribution">
                <small>
                    Photo by{" "}
                    <a
                        href={unsplashAttribution.url}
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        {unsplashAttribution.name}</a
                    >{" "}
                    on{" "}
                    <a
                        href="https://unsplash.com/"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        Unsplash
                    </a>
                </small>
            </div>
        </main>
        <nav aria-label="Next and previous notes">
            <div class="backdrop"></div>
            <ul class="u-guttered">
                <li>
                    <a
                        aria-label="Oldest"
                        href={getPathFromOptionalNote(oldest)}>&laquo;</a
                    >
                </li>
                <li>
                    <a
                        aria-label="Previous"
                        href={getPathFromOptionalNote(prev)}>&lsaquo;</a
                    >
                </li>
                <li>
                    <a aria-label="Next" href={getPathFromOptionalNote(next)}
                        >&rsaquo;</a
                    >
                </li>
                <li>
                    <a
                        aria-label="Latest"
                        href={getPathFromOptionalNote(latest)}>&raquo;</a
                    >
                </li>
            </ul>
        </nav>
    </UnsplashBackground>
</Layout>

<style lang="scss">
    main {
        padding-top: 70svh;
        padding-bottom: 8em;
    }
    nav {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        font-size: 2em;
        font-family: var(--heading);
        ul {
            display: flex;
            gap: 8px;
            list-style: none;
            justify-content: space-between;
            margin-top: 0;
            margin-bottom: 0;
            padding-top: 0;
            padding-bottom: 0;
        }
        a {
            padding: var(--space-s);
            height: 100%;
        }
    }
    .backdrop {
        position: absolute;
        inset: 0;
        top: -100%;
        height: 200%;
        backdrop-filter: blur(16px);

        background: linear-gradient(
            to top,
            var(--unsplash-color, white) 0%,
            rgba(255, 255, 255, 0.1) 50%
        );
        mask-image: linear-gradient(to top, black 0% 50%, transparent 50% 100%);
        pointer-events: none;
        z-index: -1;
    }
</style>
